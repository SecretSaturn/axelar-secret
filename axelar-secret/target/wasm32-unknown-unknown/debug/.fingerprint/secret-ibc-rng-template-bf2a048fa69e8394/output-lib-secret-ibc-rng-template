{"message":"failed to resolve: unresolved import","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/ibc.rs","byte_start":679,"byte_end":690,"line_start":29,"line_end":29,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    CosmwasmExt,","highlight_start":5,"highlight_end":16}],"label":"unresolved import","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/ibc.rs","byte_start":679,"byte_end":690,"line_start":29,"line_end":29,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    CosmwasmExt,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CosmwasmExt)]","def_site_span":{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/osmosis-std-derive-0.16.2/src/lib.rs","byte_start":681,"byte_end":742,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_cosmwasm_ext(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/ibc.rs","byte_start":679,"byte_end":690,"line_start":29,"line_end":29,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    CosmwasmExt,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":"osmosis_std::shim","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/ibc.rs","byte_start":679,"byte_end":690,"line_start":29,"line_end":29,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    CosmwasmExt,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(CosmwasmExt)]","def_site_span":{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/osmosis-std-derive-0.16.2/src/lib.rs","byte_start":681,"byte_end":742,"line_start":26,"line_end":26,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_cosmwasm_ext(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: unresolved import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ibc.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CosmwasmExt,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munresolved import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `osmosis_std::shim`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `CosmwasmExt` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":"the trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::prost::Message)]","def_site_span":{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-derive-0.12.1/src/lib.rs","byte_start":7990,"byte_end":8039,"line_start":258,"line_end":258,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub fn message(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `prost::Message`:\n  bool\n  i32\n  i64\n  u32\n  u64\n  f32\n  f64\n  IbcCounterpartyHeight\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `message::encode`","code":null,"level":"note","spans":[{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":32417,"byte_end":32423,"line_start":1058,"line_end":1058,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"    pub fn encode<M, B>(tag: u32, msg: &M, buf: &mut B)","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":32483,"byte_end":32490,"line_start":1060,"line_end":1060,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"        M: Message,","highlight_start":12,"highlight_end":19}],"label":"required by this bound in `encode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ibc.rs:25:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ::prost::Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::Message`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               u32\u001b[0m\n\u001b[0m               u64\u001b[0m\n\u001b[0m               f32\u001b[0m\n\u001b[0m               f64\u001b[0m\n\u001b[0m               IbcCounterpartyHeight\u001b[0m\n\u001b[0m             and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `message::encode`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs:1060:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1058\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn encode<M, B>(tag: u32, msg: &M, buf: &mut B)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1059\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1060\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        M: Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `encode`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `::prost::Message` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":"the trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::prost::Message)]","def_site_span":{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-derive-0.12.1/src/lib.rs","byte_start":7990,"byte_end":8039,"line_start":258,"line_end":258,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub fn message(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `prost::Message`:\n  bool\n  i32\n  i64\n  u32\n  u64\n  f32\n  f64\n  IbcCounterpartyHeight\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `message::merge`","code":null,"level":"note","spans":[{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":32675,"byte_end":32680,"line_start":1068,"line_end":1068,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn merge<M, B>(","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":32841,"byte_end":32848,"line_start":1075,"line_end":1075,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"        M: Message,","highlight_start":12,"highlight_end":19}],"label":"required by this bound in `merge`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ibc.rs:25:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ::prost::Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::Message`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               u32\u001b[0m\n\u001b[0m               u64\u001b[0m\n\u001b[0m               f32\u001b[0m\n\u001b[0m               f64\u001b[0m\n\u001b[0m               IbcCounterpartyHeight\u001b[0m\n\u001b[0m             and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `message::merge`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs:1075:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn merge<M, B>(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        M: Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `merge`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `::prost::Message` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":"the trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/ibc.rs","byte_start":585,"byte_end":601,"line_start":25,"line_end":25,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    ::prost::Message,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::prost::Message)]","def_site_span":{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-derive-0.12.1/src/lib.rs","byte_start":7990,"byte_end":8039,"line_start":258,"line_end":258,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub fn message(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `prost::Message`:\n  bool\n  i32\n  i64\n  u32\n  u64\n  f32\n  f64\n  IbcCounterpartyHeight\nand 7 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `message::encoded_len`","code":null,"level":"note","spans":[{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":33932,"byte_end":33943,"line_start":1119,"line_end":1119,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"    pub fn encoded_len<M>(tag: u32, msg: &M) -> usize","highlight_start":12,"highlight_end":23}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs","byte_start":33996,"byte_end":34003,"line_start":1121,"line_end":1121,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"        M: Message,","highlight_start":12,"highlight_end":19}],"label":"required by this bound in `encoded_len`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `osmosis_std::types::cosmos::base::v1beta1::Coin: prost::Message` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ibc.rs:25:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ::prost::Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::Message` is not implemented for `osmosis_std::types::cosmos::base::v1beta1::Coin`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::Message`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               u32\u001b[0m\n\u001b[0m               u64\u001b[0m\n\u001b[0m               f32\u001b[0m\n\u001b[0m               f64\u001b[0m\n\u001b[0m               IbcCounterpartyHeight\u001b[0m\n\u001b[0m             and 7 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `message::encoded_len`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/sean_conrad/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.12.1/src/encoding.rs:1121:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn encoded_len<M>(tag: u32, msg: &M) -> usize\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        M: Message,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `encoded_len`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `::prost::Message` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
